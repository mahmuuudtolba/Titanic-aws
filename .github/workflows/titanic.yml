name: Build, Push, and Deploy to AWS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required to checkout the code

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: python run_tests.py

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use ONE secret for the full ARN of the IAM Role
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} 
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create AWS credentials file for Docker build
        run: |
          mkdir -p /tmp/.aws
          echo "[default]" > /tmp/.aws/credentials
          echo "aws_access_key_id = ${{ env.AWS_ACCESS_KEY_ID }}" >> /tmp/.aws/credentials
          echo "aws_secret_access_key = ${{ env.AWS_SECRET_ACCESS_KEY }}" >> /tmp/.aws/credentials
          echo "aws_session_token = ${{ env.AWS_SESSION_TOKEN }}" >> /tmp/.aws/credentials
      
      - name: Build and push Docker image to ECR
        id: docker_build
        run: |
          IMAGE_TAG="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest"
          
          # Build the image using the secure secret mount
          docker build --secret id=aws,src=/tmp/.aws/credentials -t $IMAGE_TAG .
          
          # Push the image that was just built
          docker push $IMAGE_TAG
        # We use a manual docker build & push because docker/build-push-action doesn't support --secret

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use OIDC here as well for consistency and security
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} 
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Render updated ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: titanic-contianer # Make sure this matches your task definition
          image: "${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest"

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1 
        with:
          cluster: strong-crocodile-5j0qw1 
          service: titanic-aws-service-bena34c4 
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}